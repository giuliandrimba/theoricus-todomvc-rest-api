// Generated by CoffeeScript 1.6.3
(function() {
  var BSON, Database, MongoDatabase, Server, mongo;

  mongo = require("mongodb");

  Server = mongo.Server;

  MongoDatabase = mongo.Db;

  BSON = mongo.BSONPure;

  Database = (function() {
    function Database(name, host, port) {
      var _this = this;
      this.name = name;
      this.host = host != null ? host : "localhost";
      this.port = port != null ? port : 27017;
      this.mongoUri = process.env.MONGOLAB_URI || process.env.MONGOHQ_URL || 'mongodb://localhost/mydb';
      this.server = new Server(this.host, this.port, {
        auto_reconnect: true
      });
      this.db = new MongoDatabase(this.name, this.mongoUri, {
        safe: false
      });
      this.db.open(function(err, db) {
        if (!err) {
          return console.log("Connected to todos_db database");
        } else {
          return console.log("An error ocurred: " + err);
        }
      });
    }

    Database.prototype.all = function(callback) {
      var _this = this;
      return this.db.collection(this.name, {
        strict: true
      }, function(err, collection) {
        if (!err) {
          return collection.find().toArray(function(err, items) {
            if (!err) {
              return callback(items);
            } else {
              callback({
                "error": "Couldn't retrive " + _this.name + " collection"
              });
              return console.log("Couldn't retrive todos collection");
            }
          });
        } else {
          return _this._collection_access_error(callback);
        }
      });
    };

    Database.prototype.read = function(id, callback) {
      var _this = this;
      return this.db.collection(this.name, function(err, collection) {
        if (!err) {
          return collection.findOne({
            "_id": new BSON.ObjectID(id)
          }, function(err, item) {
            if (!err) {
              return callback(item);
            } else {
              callback({
                "error": "Todo not found: " + id
              });
              console.log("Error retrieving todo " + id);
              return console.log(err);
            }
          });
        } else {
          return _this._collection_access_error(callback);
        }
      });
    };

    Database.prototype["delete"] = function(id, callback) {
      var _this = this;
      return this.db.collection(this.name, function(err, collection) {
        if (!err) {
          return collection.remove({
            "_id": new BSON.ObjectID(id)
          }, {
            safe: false
          }, function(err, result) {
            if (!err) {
              console.log("Todo deleted");
              return callback({});
            } else {
              console.log("Error deleting todo " + id);
              return callback({
                "error": "Couldn't delete todo " + id
              });
            }
          });
        } else {
          return _this._collection_access_error(callback);
        }
      });
    };

    Database.prototype.update = function(id, todo, callback) {
      var _this = this;
      return this.db.collection(this.name, function(err, collection) {
        if (!err) {
          return collection.update({
            "_id": new BSON.ObjectID(id)
          }, todo, {
            safe: false
          }, function(err, result) {
            if (!err) {
              console.log("" + result + " document(s) updated");
              return callback(todo);
            } else {
              console.log("Error updating todo " + err);
              return callback({
                "error": "Error updating todo " + id
              });
            }
          });
        } else {
          return _this._collection_access_error(callback);
        }
      });
    };

    Database.prototype.create = function(todo, callback) {
      var _this = this;
      return this.db.collection(this.name, function(err, collection) {
        if (!err) {
          return collection.insert(todo, {
            safe: false
          }, function(err, result) {
            if (!err) {
              console.log("Success: " + (JSON.stringify(result[0])));
              return callback(result[0]);
            } else {
              return callback({
                "error": "Couldn't create todo"
              });
            }
          });
        } else {
          return _this._collection_access_error(callback);
        }
      });
    };

    Database.prototype._collection_access_error = function(callback) {
      console.log("Couldn't access " + this.name + " collection");
      console.log(err);
      return callback({
        "error": "Couldn't connect to " + this.name + " collection"
      });
    };

    return Database;

  })();

  module.exports = Database;

}).call(this);
